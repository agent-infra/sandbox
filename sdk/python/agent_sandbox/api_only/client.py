# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from .raw_client import AsyncRawApiOnlyClient, RawApiOnlyClient


class ApiOnlyClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawApiOnlyClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawApiOnlyClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawApiOnlyClient
        """
        return self._raw_client

    def serve_llms_txt(self, *, request_options: typing.Optional[RequestOptions] = None) -> typing.Optional[typing.Any]:
        """
        Serve auto-generated llms.txt from OpenAPI schema for LLM context

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from agent_sandbox import Sandbox

        client = Sandbox(
            base_url="https://yourhost.com/path/to/api",
        )
        client.api_only.serve_llms_txt()
        """
        _response = self._raw_client.serve_llms_txt(request_options=request_options)
        return _response.data


class AsyncApiOnlyClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawApiOnlyClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawApiOnlyClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawApiOnlyClient
        """
        return self._raw_client

    async def serve_llms_txt(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Serve auto-generated llms.txt from OpenAPI schema for LLM context

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from agent_sandbox import AsyncSandbox

        client = AsyncSandbox(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.api_only.serve_llms_txt()


        asyncio.run(main())
        """
        _response = await self._raw_client.serve_llms_txt(request_options=request_options)
        return _response.data
